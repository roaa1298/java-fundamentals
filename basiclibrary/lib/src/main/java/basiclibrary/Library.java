/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package basiclibrary;
import java.util.*;

public class Library {
    public static void main(String[] args) {
//        int[] test=roll(4);
//        for (int i=0 ; i<4 ; i++)
//        {
//            System.out.println(test[i]);  //print 4 random numbers from 1 to 6
//        }

//        int[] ar={1,2,3,3,5}; //it will print true
//        int[] ar2={1,2,3,4,5}; //it will print false
//        boolean test2=containsDuplicates(ar);
//        System.out.println(test2);

//        int[] ar={1,41,17,10,5};
//        double test4=calculateAvarage(ar);
//        System.out.println(test4);  //it will print the avarage of ar array =14.8

//        int[] test3=arrayOfArrays();
//        for (int i=0 ; i<test3.length ; i++)
//        {
//            System.out.println(test3[i]);   //it will print the array that have lowest avarage
//        }

    }
    public boolean someLibraryMethod() {
        return true;
    }

    public static int[] roll(int n){
        int[] result=new int[n];
        for(int i=0 ; i<n ; i++){
            int random_num = (int)Math.floor(Math.random()*(6-1+1)+1);
            result[i]=random_num;
        }
        return result;
    }

    public static boolean containsDuplicates(int[] a){
        for (int i=0 ; i<a.length ; i++)
        {
            for (int j=i+1 ; j<a.length ; j++)
            {
                if(a[i]==a[j])
                {
                    return true;
                }
            }
        }
        return false;
    }
    public static double calculateAvarage(int[] arr){
        double sum=0;
        for (int i=0 ; i<arr.length ; i++)
        {
            sum+=arr[i];
        }
        return sum/arr.length;
    }

    public static int[] arrayOfArrays(){
        int[][] weeklyMonthTemperatures = {
                {66, 64, 58, 65, 71, 57, 60},
                {57, 65, 65, 70, 72, 65, 51},
                {55, 54, 60, 53, 59, 57, 61},
                {65, 56, 55, 52, 55, 62, 57}
        };
        double[] avg=new double[weeklyMonthTemperatures.length];
        double min;
        for (int i=0 ; i<weeklyMonthTemperatures.length ; i++){
            double sum=0;
            for (int j=0 ; j<weeklyMonthTemperatures[i].length ; j++)
            {
                sum+=weeklyMonthTemperatures[i][j];
            }
            avg[i]=sum/weeklyMonthTemperatures[i].length;
        }
        min=avg[0];
        int c=0;
        for (int j=1 ; j<avg.length ; j++)
        {
            if (avg[j]<min)
            {
                min=avg[j];
                c=j;
            }
        }
        return weeklyMonthTemperatures[c];
    }

    public static HashSet<String> Analyzing(){
        int[][] weeklyMonthTemperatures = {
                {66, 64, 58, 65, 71, 57, 60},
                {57, 65, 65, 70, 72, 65, 51},
                {55, 54, 60, 53, 59, 57, 61},
                {65, 56, 55, 52, 55, 62, 57}
        };
        HashSet<Integer> temp=new HashSet<>();
        HashSet<String> res=new HashSet<>();
        int min=weeklyMonthTemperatures[0][0];
        int max=weeklyMonthTemperatures[0][0];
        for (int i=0 ; i<weeklyMonthTemperatures.length ; i++)
        {
            for (int j=0 ; j<weeklyMonthTemperatures[i].length ; j++)
            {
                temp.add(weeklyMonthTemperatures[i][j]);
                if (weeklyMonthTemperatures[i][j]>max)
                {
                    max=weeklyMonthTemperatures[i][j];
                }
                if (weeklyMonthTemperatures[i][j]<min)
                {
                    min=weeklyMonthTemperatures[i][j];
                }
            }
        }
        res.add("High: "+max);
        res.add("Low: "+min);
        for (int r=min ; r<max ; r++)
        {
            if (!temp.contains(r))
            {
                res.add("Never saw temperature: " +r);
            }
        }
        return res;

    }

    public static String tally(List<String> v){
        HashSet<String> votes=new HashSet<>();
        Map<Integer,String> counts=new HashMap<>();
        int c=0;
        int win=0;
        for (String vote:v
             ) {
            votes.add(vote);
        }
        for (String vote2:votes
             ) {
            c=0;
            for (int i=0 ; i<v.size() ; i++)
            {
                if (v.get(i)==vote2)
                {
                    c++;
                }
            }
            counts.put(c,vote2);
            if (c>win)
            {
                win=c;
            }
        }
        return counts.get(win);
    }

}
